

// Route for initiating GitHub authentication
app.get('/auth/github', (req, res, next) => {
  req.session.profileType = req.body.profileType;  // Assuming you pass profileType in the request body
  next();
}, passport.authenticate('github'));

// Callback route after GitHub authentication
app.get('/auth/github/callback', (req, res, next) => {
  passport.authenticate('github', (err, data) => {
    if (err) {
      return res.redirect('/auth/github/failure');
    }
    if (!data) {
      return res.redirect('/auth/github/failure');
    }
    // Send the token to the frontend
    res.redirect(`/auth/github/success?token=${data.token}`);
  })(req, res, next);
});

// Success route
app.get('/auth/github/success', (req, res) => {
  const { token } = req.query;
  res.json({ success: true, message: 'Authentication successful', token });
});

// Failure route
app.get('/auth/github/failure', (req, res) => {
  res.json({ success: false, message: 'Authentication failed' });
});

// Route for initiating Twitter authentication
app.get('/auth/twitter', (req, res, next) => {
  req.session.profileType = req.body.profileType;  // Assuming you pass profileType in the request body
  next();
}, passport.authenticate('twitter'));

// Callback route after Twitter authentication
app.get('/auth/twitter/callback', (req, res, next) => {
  passport.authenticate('twitter', (err, data) => {
    if (err) {
      return res.redirect('/auth/twitter/failure');
    }
    if (!data) {
      return res.redirect('/auth/twitter/failure');
    }
    // Send the token to the frontend
    res.redirect(`/auth/twitter/success?token=${data.token}`);
  })(req, res, next);
});

// Success route
app.get('/auth/twitter/success', (req, res) => {
  const { token } = req.query;
  res.json({ success: true, message: 'Authentication successful', token });
});

// Failure route
app.get('/auth/twitter/failure', (req, res) => {
  res.json({ success: false, message: 'Authentication failed' });
});


// Route for initiating Apple authentication
app.get('/auth/apple', (req, res, next) => {
  req.session.profileType = req.body.profileType;  // Assuming you pass profileType in the request body
  next();
}, passport.authenticate('apple'));

// Callback route after Apple authentication
app.get('/auth/apple/callback', (req, res, next) => {
  passport.authenticate('apple', (err, data) => {
    if (err) {
      return res.redirect('/auth/apple/failure');
    }
    if (!data) {
      return res.redirect('/auth/apple/failure');
    }
    // Send the token to the frontend
    res.redirect(`/auth/apple/success?token=${data.token}`);
  })(req, res, next);
});

// Success route
app.get('/auth/apple/success', (req, res) => {
  const { token } = req.query;
  res.json({ success: true, message: 'Authentication successful', token });
});

// Failure route
app.get('/auth/apple/failure', (req, res) => {
  res.json({ success: false, message: 'Authentication failed' });
});

// Route for initiating LinkedIn authentication
app.get('/auth/linkedin', (req, res, next) => {
  req.session.profileType = req.body.profileType;  // Assuming you pass profileType in the request body
  next();
}, passport.authenticate('linkedin'));

// Callback route after LinkedIn authentication
app.get('/auth/linkedin/callback', (req, res, next) => {
  passport.authenticate('linkedin', (err, data) => {
    if (err) {
      return res.redirect('/auth/linkedin/failure');
    }
    if (!data) {
      return res.redirect('/auth/linkedin/failure');
    }
    // Send the token to the frontend
    res.redirect(`/auth/linkedin/success?token=${data.token}`);
  })(req, res, next);
});

// Success route
app.get('/auth/linkedin/success', (req, res) => {
  const { token } = req.query;
  res.json({ success: true, message: 'Authentication successful', token });
});

// Failure route
app.get('/auth/linkedin/failure', (req, res) => {
  res.json({ success: false, message: 'Authentication failed' });
});

// Route for initiating Microsoft authentication
app.get('/auth/microsoft', (req, res, next) => {
  req.session.profileType = req.body.profileType;  // Assuming you pass profileType in the request body
  next();
}, passport.authenticate('microsoft'));

// Callback route after Microsoft authentication
app.get('/auth/microsoft/callback', (req, res, next) => {
  passport.authenticate('microsoft', (err, data) => {
    if (err) {
      return res.redirect('/auth/microsoft/failure');
    }
    if (!data) {
      return res.redirect('/auth/microsoft/failure');
    }
    // Send the token to the frontend
    res.redirect(`/auth/microsoft/success?token=${data.token}`);
  })(req, res, next);
});

// Success route
app.get('/auth/microsoft/success', (req, res) => {
  const { token } = req.query;
  res.json({ success: true, message: 'Authentication successful', token });
});

// Failure route
app.get('/auth/microsoft/failure', (req, res) => {
  res.json({ success: false, message: 'Authentication failed' });
});
